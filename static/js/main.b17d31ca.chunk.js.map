{"version":3,"sources":["components/pixi/Viewport.tsx","components/pixi/Label.tsx","components/Map.tsx","App.tsx","components/pixi/ParticleEmitter.ts","components/Overview.tsx","components/contentModal/index.tsx","components/Warehouse.tsx","serviceWorker.ts","index.tsx"],"names":["Viewport","React","forwardRef","props","ref","app","useApp","cursor","process","renderer","plugins","interaction","cursorStyles","pointer","PixiComponentViewport","PixiComponent","create","viewport","PixiViewport","screenWidth","screenHeight","worldWidth","worldHeight","ticker","minScale","maxScale","drag","pinch","wheel","clamp","direction","clampZoom","decelerate","Label","textRef","useRef","text","style","useMemo","PIXI","align","lineHeight","wordWrap","wordWrapWidth","labelWidth","fontFamily","fontSize","textBaseline","fontWeight","textBoxHeight","metrics","measureText","Math","min","height","useEffect","textCmp","current","maskGraphics","beginFill","drawRect","padding","endFill","mask","addChild","interactive","buttonMode","anchor","draw","g","lineStyle","drawRoundedRect","y","PixiPlugin","registerPIXI","gsap","registerPlugin","map","Map","content","image","children","canvasWidth","canvasHeight","blur","viewportRef","backgroundRef","resize","scale","moveCenter","to","duration","pixi","renderLabel","label","position","key","name","pointertap","labelClick","handleLabelClick","width","options","transparent","index","ParticleEmitter","applyProps","instance","oldProps","newProps","config","newP","applyDefaultProps","emitter","this","_emitter","particles","from","elapsed","performance","now","emit","tick","raf","requestAnimationFrame","update","willUnmount","cancelAnimationFrame","Overview","console","log","contentItem","background","filter","ZoomBlurFilter","filters","strength","localPos","onUpdate","onComplete","labelClicked","x","smoke","ContentModal","onClose","handleClose","isOpen","ariaHideApp","overlayClassName","className","onRequestClose","onClick","c","href","url","target","rel","Warehouse","useState","selectedLabel","setSelectedLabel","getImage","goBack","thismap","zalmweg","steurweg","App","overview","currentMap","setCurrentMap","setCanvasWidth","setCanvasHeight","window","innerWidth","outerWidth","innerHeight","outerHeight","addEventListener","removeEventListener","handleOverviewLabelClicked","handleBackClicked","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qxFAkBMA,EAAWC,IAAMC,YAA8B,SAACC,EAAOC,GAC3D,IAAMC,EAAMC,mBACZ,GAAID,EAAK,CAEL,IAAME,EAAM,eAAWC,gBAAX,qDACZH,EAAII,SAASC,QAAQC,YAAYC,aAAaC,QAAUN,EAE5D,OAAO,kBAACO,EAAD,eAAuBT,IAAKA,GAASF,EAArC,CAA4CC,IAAKA,QAOpDU,EAAwBC,wBAAc,WAAY,CACtDC,OAAQ,SAACb,GACP,IAAMc,EAAW,IAAIC,IAAa,CAChCC,YAAahB,EAAMgB,YACnBC,aAAcjB,EAAMiB,aACpBC,WAAYlB,EAAMkB,WAClBC,YAAanB,EAAMmB,YACnBC,OAAQpB,EAAME,IAAIkB,OAClBZ,YAAaR,EAAME,IAAII,SAASC,QAAQC,cAPG,EAczCR,EAFFqB,gBAZ2C,MAYhC,IAZgC,IAczCrB,EADFsB,gBAb2C,MAahC,EAbgC,EAwB7C,OARAR,EACGS,OACAC,QACAC,QACAC,MAAM,CAAEC,UAAW,MACnBC,UAAU,CAAEP,WAAUC,aACtBO,aAEIf,KAGIjB,I,QCmBAiC,EArEDhC,IAAMC,YAA2E,SAACC,EAAOC,GAErG,IAAM8B,EAAUC,iBAAkB,MAK3BC,EAAQjC,EAARiC,KAEDC,EAAQC,mBAAQ,WACpB,OAAO,IAAIC,YAAe,CACxBC,MAAO,SACPC,WAAY,GACZC,UAAU,EACVC,cAAeC,IACfC,WAAY,2CACZC,SAAU,GACVC,aAAc,aACdC,WAAY,UAEb,IAEGC,EAAgBX,mBAAQ,WAC5B,IAAMY,EAAUX,cAAiBY,YAAYf,EAAMC,GAEnD,OADee,KAAKC,IAAIH,EAAQI,OAAS,GA1BtB,OA4BlB,CAAClB,EAAMC,IAcV,OAZAkB,qBAAU,WACR,IAAMC,EAAUtB,EAAQuB,QAElBC,EAAe,IAAInB,WACzBmB,EAAaC,UAAU,UACvBD,EAAaE,UAAS,IAA2B,EAAGhB,IAAwBK,EAAgBY,IAC5FH,EAAaI,UAEbN,EAAQO,KAAOL,EACfF,EAAQQ,SAASN,KAClB,CAACT,EAAef,IAGf,kBAAC,YAAD,eACE+B,aAAW,EACXC,YAAU,EACVC,OAAQ,CAAC,GAAK,GACd/D,IAAKA,GACDD,GAEJ,kBAAC,WAAD,CACEiE,KAAM,SAACC,GACLA,EAAEC,UA7CW,EA6Ca,GAC1BD,EAAEV,UAAU,UAEZU,EAAEE,iBAAgB,IAAiB,EAlDxB,KAkDwCtB,EA/CvC,IAgDZoB,EAAEP,YAGF,kBAAC,OAAD,CACE1D,IAAK8B,EACLE,KAAMA,EACN+B,OAAQ,CAAC,GAAK,GACdK,EAzDM,GAyDFvB,EACJZ,MAAOA,SC9DnBoC,IAAWC,aAAanC,GACxBoC,IAAKC,eAAeH,KAmBpB,ICrBYI,EDmGGC,EA9EH,SAAC3E,GAAkB,IAE3B4E,EAOiB5E,EAPjB4E,QACAC,EAMiB7E,EANjB6E,MACAC,EAKiB9E,EALjB8E,SACA5D,EAIiBlB,EAJjBkB,WACAC,EAGiBnB,EAHjBmB,YACA4D,EAEiB/E,EAFjB+E,YACAC,EACiBhF,EADjBgF,aAR0B,EASThF,EAAjBiF,YAT0B,SAUtBC,EAAclD,iBAAqB,MACnCmD,EAAgBnD,iBAAoB,MAE1CoB,qBAAU,WAER,GAAI8B,EAAY5B,QAAS,CACvB,IAAMxC,EAAWoE,EAAY5B,QAM7B,OALAxC,EAASsE,OAAOL,EAAaC,EAAc9D,EAAYC,GACvDL,EAASuE,MAAQ,IAAIjD,QAAW,GAAI,IACpCtB,EAASwE,WAAWpE,EAAa,EAAGC,EAAc,GAG3C,gBAIR,CAAC4D,EAAaC,EAAc9D,EAAYC,IAW3CiC,qBAAU,WAEJ6B,EACFT,IAAKe,GAAGL,EAAY5B,QAAS,CAACkC,SAAU,GAAIC,KAAM,CAACR,KAAK,MAExDT,IAAKe,GAAGL,EAAY5B,QAAS,CAACkC,SAAU,GAAIC,KAAM,CAACR,KAAK,OAEzD,CAACA,IAEJ,IAIMS,EAAc,SAACC,GACnB,IAAMC,EAAW,IAAIxD,QAAWuD,EAAMC,SAAS,GAAID,EAAMC,SAAS,IAElE,OACE,kBAAC,EAAD,CACEC,IAAKF,EAAM1D,KACXA,KAAM0D,EAAM1D,KACZ6D,KAAMH,EAAM1D,KACZ2D,SAAUA,EACVG,WAAY,kBAbO,SAACJ,GACxB3F,EAAMgG,WAAWL,EAAOT,EAAY5B,QAAU6B,EAAc7B,SAYtC2C,CAAiBN,IACnC7B,aAAa,KAKnB,OACE,kBAAC,QAAD,CAAOoC,MAAOnB,EAAa5B,OAAQ6B,EAAcmB,QAAS,CAACC,aAAa,IACtE,kBAAC,EAAD,CACEpF,YAAa+D,EAAa9D,aAAc+D,EAAc9D,WAAYA,EAAYC,YAAaA,EAAalB,IAAKiF,GAC7G,kBAAC,SAAD,CAAQL,MAAK,UAAKxE,gBAAL,YAA+BwE,GAAS5E,IAAKkF,GACvDL,EACAF,EAAQF,KAAI,SAACiB,EAAOU,GAAR,OAAkBX,EAAYC,U,gBEhDtCW,EA3CS1F,wBAAsF,kBAAmB,CAC7HC,OAD6H,WAE3H,OAAO,IAAIuB,qBAGbmE,WAL6H,SAKlHC,EAAUC,EAAiBC,GAAkB,IAC9C7B,EAA2B6B,EAA3B7B,MAAO8B,EAAoBD,EAApBC,OAAWC,EAD2B,YAClBF,EADkB,oBAIrDG,4BAAkBL,EAAUC,EAAUG,GAEtC,IAAIE,EAAWC,KAAaC,SAC5B,IAAKF,EAAS,CACZA,EAAU,IAAIG,IACZT,EACA,CAACpE,UAAa8E,KAAKrC,IACnB8B,GAGF,IAAIQ,EAAUC,YAAYC,MAS1BP,EAAQQ,MAAO,EAPF,SAAPC,IACJT,EAAQU,IAAMC,sBAAsBF,GACpC,IAAMF,EAAMD,YAAYC,MACxBP,EAAQY,OAAyB,MAAjBL,EAAMF,IAEtBA,EAAUE,EAIZE,GAEDR,KAAaC,SAAWF,GAG3Ba,YAnC6H,WAoCtHZ,KAAaC,WACfD,KAAaC,SAASM,MAAO,EAC9BM,qBAAsBb,KAAaC,SAASQ,S,gBCmBrCK,EAjDE,SAAC7H,GAAkB,IAC3B4E,EAAsC5E,EAAtC4E,QAASG,EAA6B/E,EAA7B+E,YAAaC,EAAgBhF,EAAhBgF,aA2B7B,OAFA8C,QAAQC,IAAI,YAGV,kBAAC,EAAD,CACEnD,QAASA,EACTC,MAAM,2BACN3D,WAAY,KACZC,YAAa,KACb4D,YAAaA,EACbC,aAAcA,EACdgB,WAjCqB,SAACgC,EAAqBlH,EAAwBmH,GACrE,IAAMC,EAAS,IAAIC,IAAe,IAAM,CAACpD,EAAc,EAAGC,EAAe,GAAI,KAC7EiD,EAAWG,QAAU,CAACF,GACtB1D,IAAKe,GAAG2C,EAAQ,CACd1C,SAAU,GACV6C,SAAU,MAEZ,IAAMC,EAAW,IAAIlG,QAAW4F,EAAYpC,SAAS,GAAIoC,EAAYpC,SAAS,GAAK,IAEnFpB,IAAKe,GAAGzE,EAAU,CAChB0E,SAAU,GACV+C,SAAU,WACRzH,EAASwE,WAAWgD,IAEtB7C,KAAM,CACJJ,MAAO,GAETmD,WAAY,WACVxI,EAAMyI,aAAaT,QAiBpB,kBAAC,EAAD,CACGlC,KAAK,QACL4C,EAAG,KACHrE,EAAG,IACHQ,MAAK,UAAKxE,gBAAL,yBACLsG,OAAQgC,M,yBChBHC,G,MAnCM,SAAC5I,GAAkB,IAC9B4E,EAAqB5E,EAArB4E,QAASiE,EAAY7I,EAAZ6I,QAEXC,EAAc,WAClBD,KAGF,OACE,kBAAC,IAAD,CACEE,QAAQ,EACRC,aAAa,EACbC,iBAAiB,gBACjBC,UAAU,QACVC,eAAgBL,GAEhB,oCACE,yBAAKI,UAAU,UACd,4BAAKtE,EAAQ3C,KAAb,KACC,yBAAKiH,UAAU,cAAcE,QAAS,kBAAMN,QAE9C,4BACGlE,EAAQA,QAASF,KAAI,SAAA2E,GAAC,OACrB,4BACE,uBAAGC,KAAMD,EAAEE,IAAKC,OAAO,SAASC,IAAI,uBACjCJ,EAAE1D,gBC2CJ+D,EA1DG,SAAC1J,GAAkB,IAC5B4E,EAAsC5E,EAAtC4E,QAASG,EAA6B/E,EAA7B+E,YAAaC,EAAgBhF,EAAhBgF,aADK,EAEQ2E,mBAAwB,MAFhC,mBAE3BC,EAF2B,KAEZC,EAFY,KAgC5BhF,EAAQiF,EAAS9J,EAAM0E,KAE7B,OACE,oCACE,yBAAKwE,UAAU,cAAcE,QAASpJ,EAAM+J,SAC5C,kBAAC,EAAD,CACEnF,QAASA,EACTC,MAAOA,EACP3D,WAAY,KACZC,YAAa,KACb4D,YAAaA,EACbC,aAAcA,EACdgB,WAxCmB,SAACL,GACxBkE,EAAiBlE,MA0CbiE,GACF,kBAAC,EAAD,CACEhF,QAASgF,EACTf,QAtBc,WAClBgB,EAAiB,WA+BfC,EAAW,SAACE,GAChB,OAAOA,GACL,KAAKtF,EAAIuF,QACP,MAAO,yBACT,KAAKvF,EAAIwF,SACP,QACA,MAAO,6B,SJ5EDxF,O,uBAAAA,I,qBAAAA,I,wBAAAA,M,KA8EGyF,MAxEf,WAAgB,IAAD,EAEuBR,mBAASjF,EAAI0F,UAFpC,mBAENC,EAFM,KAEMC,EAFN,OAGyBX,mBAAS,MAHlC,mBAGN5E,EAHM,KAGOwF,EAHP,OAI2BZ,mBAAS,KAJpC,mBAIN3E,EAJM,KAIQwF,EAJR,KAMbpH,qBAAU,WAER,IAAMgC,EAAS,WACb,IAAMc,EAAQjD,KAAKC,IAAIuH,OAAOC,WAAYD,OAAOE,YAC3CxH,EAASF,KAAKC,IAAIuH,OAAOG,YAAaH,OAAOI,aACnDN,EAAerE,GACfsE,EAAgBrH,IAKlB,OAHAiC,IAEAqF,OAAOK,iBAAiB,SAAU1F,GAC3B,WACLqF,OAAOM,oBAAoB,SAAU3F,MAEtC,IAEH,IAAM4F,EAA6B,SAAChD,GAClC,OAAOA,EAAYwB,QACjB,IAAK,UACHc,EAAc5F,EAAIuF,SAClB,MACF,IAAK,WACHK,EAAc5F,EAAIwF,YAKlBe,EAAoB,WACxBX,EAAc5F,EAAI0F,WAGpB,OACE,oCAEIC,IAAe3F,EAAI0F,UACnB,kBAAC,EAAD,CACExF,QAASwF,EACT3B,aAAcuC,EACdjG,YAAaA,EACbC,aAAcA,IAGhBqF,IAAe3F,EAAIwF,UACnB,kBAAC,EAAD,CACEtF,QAASsF,EACTxF,IAAKA,EAAIwF,SACTzB,aAAcuC,EACdjB,OAAQkB,EACRlG,YAAaA,EACbC,aAAcA,IAGhBqF,IAAe3F,EAAIuF,SACnB,kBAAC,EAAD,CACErF,QAASqF,EACTvF,IAAKA,EAAIuF,QACTxB,aAAcuC,EACdjB,OAAQkB,EACRlG,YAAaA,EACbC,aAAcA,MKpEJkG,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.b17d31ca.chunk.js","sourcesContent":["import React from \"react\";\nimport { Viewport as PixiViewport, ClickEventData } from \"pixi-viewport\";\nimport { PixiComponent, useApp } from \"@inlet/react-pixi\";\n\ninterface Props {\n  children: React.ReactNode;\n  onClick?(event: ClickEventData): void;\n  screenWidth: number,\n  screenHeight: number,\n  worldWidth: number,\n  worldHeight: number,\n  minScale?: number;\n  maxScale?: number;\n}\n\n/** Viewport leverages pixi-viewport to create a pannable map \n * https://davidfig.github.io/pixi-viewport/jsdoc/\n */\nconst Viewport = React.forwardRef<PixiViewport, any>((props, ref) => {\n  const app = useApp();\n  if (app) {\n      // Perhaps this is better moved somewhere else\n      const cursor = `url('${process.env.PUBLIC_URL}/img/cursors/dwarven_gauntlet_extra_6.png'), auto`;\n      app.renderer.plugins.interaction.cursorStyles.pointer = cursor;\n  }\n  return <PixiComponentViewport app={app} {...props} ref={ref} />;  \n})\n\ninterface PixiComponentProps {\n    app: PIXI.Application;\n}\n\nconst PixiComponentViewport = PixiComponent(\"Viewport\", {\n  create: (props: PixiComponentProps & Props) => {\n    const viewport = new PixiViewport({\n      screenWidth: props.screenWidth,\n      screenHeight: props.screenHeight,\n      worldWidth: props.worldWidth,\n      worldHeight: props.worldHeight,\n      ticker: props.app.ticker,\n      interaction: props.app.renderer.plugins.interaction,\n      // the interaction module is important for wheel to work properly when renderer.view is placed or scaled\n    });\n\n    const { \n      minScale = .25, \n      maxScale = 1 \n    } = props;\n    \n    viewport\n      .drag()\n      .pinch()\n      .wheel()\n      .clamp({ direction: 'x' })\n      .clampZoom({ minScale, maxScale })\n      .decelerate();\n\n    return viewport;\n  },\n});\nexport default Viewport;\n","import React, { useMemo, useRef, useEffect } from \"react\";\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\nimport * as PIXI from 'pixi.js';\n\ninterface Props {\n  text: string;\n}\n\nconst labelMaxHeight = 150 + 60; // three lines plus padding\n//const Label = (props: Props & React.ComponentProps<typeof Container>) => {\nconst Label = React.forwardRef<PIXI.Container, Props & React.ComponentProps<typeof Container>>((props, ref) => {\n\n  const textRef = useRef<PIXI.Text>(null);\n  const labelWidth = 500;\n  const padding = 30;\n  const borderRadius = 4;\n  const roundRadius = 10;\n  const {text} = props;\n\n  const style = useMemo(() => {\n    return new PIXI.TextStyle({\n      align: 'center',\n      lineHeight: 50,\n      wordWrap: true,\n      wordWrapWidth: labelWidth - 2 * padding,\n      fontFamily: '\"Source Sans Pro\", Helvetica, sans-serif',\n      fontSize: 40,\n      textBaseline: \"alphabetic\",\n      fontWeight: \"400\"\n    });\n  }, []);\n\n  const textBoxHeight = useMemo(() => {\n    const metrics = PIXI.TextMetrics.measureText(text, style);\n    const height = Math.min(metrics.height + 2 * padding, labelMaxHeight);\n    return height;\n  }, [text, style]);\n\n  useEffect(() => {\n    const textCmp = textRef.current as any as PIXI.Text;\n\n    const maskGraphics = new PIXI.Graphics();\n    maskGraphics.beginFill(0xBADA55);\n    maskGraphics.drawRect(-labelWidth / 2 + padding, 0, labelWidth-padding * 2, textBoxHeight - padding * 2);\n    maskGraphics.endFill(); \n\n    textCmp.mask = maskGraphics;\n    textCmp.addChild(maskGraphics);\n}, [textBoxHeight, textRef]);\n\n  return (\n    <Container \n      interactive\n      buttonMode\n      anchor={[0.5, 1]}\n      ref={ref}\n      {...props}\n    >\n      <Graphics\n        draw={(g:PIXI.Graphics) => {\n          g.lineStyle(borderRadius, 0x000000);\n          g.beginFill(0xffffff);\n          // x, y, width, height, radius\n          g.drawRoundedRect(-labelWidth / 2, 0, labelWidth, -textBoxHeight, roundRadius);\n          g.endFill();\n        }\n      }>\n          <Text \n            ref={textRef}  \n            text={text}\n            anchor={[0.5, 0]}\n            y={-textBoxHeight + padding}\n            style={style}          \n         />\n\n      </Graphics>\n      </Container>\n  )\n});\nexport default Label;","import React, { useRef, useEffect } from \"react\";\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport { Stage, Sprite } from \"@inlet/react-pixi\";\nimport Viewport from \"./pixi/Viewport\";\nimport * as PIXI from 'pixi.js';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\nimport Label from \"./pixi/Label\";\nimport { ILabel } from \"../common/constants\";\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\nif (process.env.NODE_ENV === \"development\") {\n  // @ts-ignore\n  window.__PIXI_INSPECTOR_GLOBAL_HOOK__ && window.__PIXI_INSPECTOR_GLOBAL_HOOK__.register({ PIXI: PIXI });\n}\n\ninterface Props {\n  content: ILabel[];\n  image: string;\n  children?: React.ReactNode;\n  worldWidth: number;\n  worldHeight: number;\n  canvasWidth: number;\n  canvasHeight: number;\n  blur?: boolean;\n  labelClick: (label: ILabel, viewport: PixiViewport, background: PIXI.Sprite) => void;\n}\n\nconst Map = (props: Props) => {\n  const { \n    content,\n    image, \n    children,\n    worldWidth, \n    worldHeight, \n    canvasWidth, \n    canvasHeight, \n    blur = false } = props;\n  const viewportRef = useRef<PixiViewport>(null);\n  const backgroundRef = useRef<PIXI.Sprite>(null);\n\n  useEffect(() => {\n    // Center the map\n    if (viewportRef.current) {\n      const viewport = viewportRef.current;\n      viewport.resize(canvasWidth, canvasHeight, worldWidth, worldHeight);\n      viewport.scale = new PIXI.Point(.5, .5);\n      viewport.moveCenter(worldWidth / 2, worldHeight / 2);\n\n\n      return () => {\n        // tween.kill(viewport);\n      }\n    }\n  }, [canvasWidth, canvasHeight, worldWidth, worldHeight]);\n\n//   useEffect(() => {\n//     viewportRef.current?.on(\"zoomed\", (event) => { \n//       const factor = 1 / (event.viewport as any).lastViewport.scaleX;;\n//       labelRef.current!.scale = new PIXI.Point(factor, factor);\n// //      console.log(labelRef)\n//     });\n//     // todo normalize zoom on labels\n//   }, [viewportRef])\n\n  useEffect(() => {\n    // Blur the map when situation is selected\n    if (blur) {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:20}});\n    } else {\n      gsap.to(viewportRef.current, {duration: .5, pixi: {blur:0}});\n    }\n  }, [blur]);\n\n  const handleLabelClick = (label: ILabel) => {\n    props.labelClick(label, viewportRef.current!, backgroundRef.current!);\n  }\n\n  const renderLabel = (label: ILabel) => {\n    const position = new PIXI.Point(label.position[0], label.position[1]);\n\n    return (\n      <Label\n        key={label.text}\n        text={label.text}\n        name={label.text}\n        position={position}\n        pointertap={() => handleLabelClick(label)}\n        interactive={true}\n      />\n    ); \n  }\n\n  return (\n    <Stage width={canvasWidth} height={canvasHeight} options={{transparent: true}} >\n      <Viewport \n        screenWidth={canvasWidth} screenHeight={canvasHeight} worldWidth={worldWidth} worldHeight={worldHeight} ref={viewportRef} >\n        <Sprite image={`${process.env.PUBLIC_URL}/${image}`} ref={backgroundRef} >\n          {children}\n          {content.map((label, index) => renderLabel(label))}\n        </Sprite>\n      </Viewport>\n    </Stage>\n  )\n};\n\nexport default Map;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport overview from './content/overview.json';\nimport zalmweg from './content/zalmweg.json';\nimport steurweg from './content/steurweg.json';\nimport Overview from './components/Overview';\nimport Warehouse from './components/Warehouse';\nimport { ILabel } from './common/constants';\n\nexport enum map {\n  overview,\n  zalmweg,\n  steurweg,\n}\n\nfunction App() {\n\n  const [currentMap, setCurrentMap] = useState(map.overview);\n  const [canvasWidth, setCanvasWidth] = useState(1200);\n  const [canvasHeight, setCanvasHeight] = useState(600);\n\n  useEffect(() => {\n    // This will set the dimensions of the canvas to that of the window\n    const resize = () => {\n      const width = Math.min(window.innerWidth, window.outerWidth);\n      const height = Math.min(window.innerHeight, window.outerHeight);\n      setCanvasWidth(width);\n      setCanvasHeight(height); \n    }\n    resize();\n\n    window.addEventListener(\"resize\", resize);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  const handleOverviewLabelClicked = (contentItem: ILabel) => {\n    switch(contentItem.target) {\n      case \"zalmweg\":\n        setCurrentMap(map.zalmweg);\n        break;\n      case \"steurweg\":\n        setCurrentMap(map.steurweg);\n        break;\n    }\n  }\n\n  const handleBackClicked = () => {\n    setCurrentMap(map.overview);\n  }\n\n  return (\n    <>\n      {/* { intro && (<IntroModal selectedAvatar={avatar} onClose={() => {setIntro(false)}} onChangeAvatar={setAvatar}/>)} */}\n      { currentMap === map.overview && (\n        <Overview \n          content={overview}\n          labelClicked={handleOverviewLabelClicked}\n          canvasWidth={canvasWidth}\n          canvasHeight={canvasHeight}\n        /> )\n      }\n      { currentMap === map.steurweg && (\n        <Warehouse \n          content={steurweg}\n          map={map.steurweg}\n          labelClicked={handleOverviewLabelClicked}\n          goBack={handleBackClicked}\n          canvasWidth={canvasWidth}\n          canvasHeight={canvasHeight}\n        /> )\n      }\n      { currentMap === map.zalmweg && (\n        <Warehouse \n          content={zalmweg}\n          map={map.zalmweg}\n          labelClicked={handleOverviewLabelClicked}\n          goBack={handleBackClicked}\n          canvasWidth={canvasWidth}\n          canvasHeight={canvasHeight}\n        /> )\n      }\n    </>  \n  )\n};\n\nexport default App;\n\n","import { PixiComponent, applyDefaultProps, Container } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport * as particles from 'pixi-particles';\n\n\ninterface Props  {\n    image: string;\n    config: particles.OldEmitterConfig | particles.EmitterConfig;\n};\n\nconst ParticleEmitter = PixiComponent<Props & React.ComponentProps<typeof Container>, PIXI.ParticleContainer>(\"ParticleEmitter\", {\n    create() {\n      return new PIXI.ParticleContainer();\n    },\n\n    applyProps(instance, oldProps: Props, newProps: Props) {\n      const { image, config, ...newP } = newProps;\n  \n      // apply rest props to PIXI.ParticleContainer\n      applyDefaultProps(instance, oldProps, newP);\n      \n      let emitter = (this as any)._emitter;\n      if (!emitter) {\n        emitter = new particles.Emitter(\n          instance,\n          [PIXI.Texture.from(image)],\n          config\n        );\n  \n        let elapsed = performance.now();\n  \n        const tick = () => {\n          emitter.raf = requestAnimationFrame(tick);\n          const now = performance.now();\n          emitter.update((now - elapsed) * 0.0003);\n  \n          elapsed = now;\n        };  \n        emitter.emit = true;\n\n        tick();\n      }\n      (this as any)._emitter = emitter;\n    },\n\n    willUnmount() {\n      if ((this as any)._emitter) {\n        (this as any)._emitter.emit = false;\n        cancelAnimationFrame((this as any)._emitter.raf);\n      }\n    }\n});\n\nexport default ParticleEmitter;","import React, {  } from \"react\";\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport * as PIXI from 'pixi.js';\nimport { gsap } from 'gsap'\nimport { ILabel } from \"../common/constants\";\nimport Map from \"./Map\";\nimport ParticleEmitter from \"./pixi/ParticleEmitter\";\nimport {ZoomBlurFilter} from '@pixi/filter-zoom-blur';\nimport smoke from './../smoke.json';\n\ninterface Props {\n  content: ILabel[];\n  children?: React.ReactNode;\n  canvasWidth: number;\n  canvasHeight: number;\n  labelClicked: (contentItem: ILabel) => void;\n}\n\nconst Overview = (props: Props) => {\n  const {content, canvasWidth, canvasHeight} = props;\n  \n  const handleLabelClick = (contentItem: ILabel, viewport: PixiViewport, background: PIXI.Sprite ) => {\n    const filter = new ZoomBlurFilter(0.05, [canvasWidth / 2, canvasHeight / 2], 300)\n    background.filters = [filter];\n    gsap.to(filter, {\n      duration: .8,\n      strength: .09\n    });\n    const localPos = new PIXI.Point(contentItem.position[0], contentItem.position[1] - 30);\n    \n    gsap.to(viewport, {\n      duration: .8,\n      onUpdate: () => {\n        viewport.moveCenter(localPos);  \n      },\n      pixi: {\n        scale: 1\n      },\n      onComplete: () => {\n        props.labelClicked(contentItem);\n      }\n    });\n  }\n\n  console.log('overview')\n\n  return ( \n    <Map\n      content={content}\n      image=\"images/map/landscape.png\"\n      worldWidth={6528}\n      worldHeight={2202}\n      canvasWidth={canvasWidth}\n      canvasHeight={canvasHeight}\n      labelClick={handleLabelClick}\n    >\n       <ParticleEmitter\n          name=\"smoke\"\n          x={2491}\n          y={793}\n          image={`${process.env.PUBLIC_URL}/images/map/smoke.png`} \n          config={smoke} \n        />\n    </Map>\n  )\n};\n\nexport default Overview;","import React from 'react';\nimport ReactModal from 'react-modal';\nimport './modal.css';\nimport { ILabel } from '../../common/constants';\n\ninterface Props {\n  content: ILabel;\n  onClose: () => void;  \n}\n\nconst ContentModal = (props: Props) => {\n  const { content, onClose } = props;\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <ReactModal\n      isOpen={true}\n      ariaHideApp={false}\n      overlayClassName=\"modal-overlay\"\n      className=\"modal\"\n      onRequestClose={handleClose}\n    >\n      <>\n        <div className=\"header\">\n         <h1>{content.text} </h1>\n          <div className=\"modal-close\" onClick={() => handleClose()}></div>\n        </div>\n        <ul>\n          {content.content!.map(c => (\n            <li>\n              <a href={c.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {c.label}\n              </a>\n            </li>\n          ))}\n        </ul>\n        {/* <iframe name=\"content\" title=\"content\"/> */}\n      </>\n    </ReactModal>  \n  )\n}\n\nexport default ContentModal;\n\n","import React, { useState } from \"react\";\nimport { Viewport as PixiViewport } from \"pixi-viewport\";\nimport * as PIXI from 'pixi.js';\nimport { ILabel } from \"../common/constants\";\nimport Map from \"./Map\";\nimport './warehouse.css';\nimport ContentModal from \"./contentModal\";\nimport { map } from \"../App\";\n\ninterface Props {\n  map: map,\n  content: ILabel[];\n  children?: React.ReactNode;\n  canvasWidth: number;\n  canvasHeight: number;\n  labelClicked: (contentItem: ILabel) => void;\n  goBack: () => void;\n}\n\nconst Warehouse = (props: Props) => {\n  const {content, canvasWidth, canvasHeight} = props;\n  const [selectedLabel, setSelectedLabel] = useState<ILabel | null>(null);\n\n  const handleLabelClick = (label: ILabel) => {\n    setSelectedLabel(label);\n    // const filter = new ZoomBlurFilter(0.05, [canvasWidth / 2, canvasHeight / 2], 300)\n    // background.filters = [filter];\n    // gsap.to(filter, {\n    //   duration: .8,\n    //   strength: .2\n    // });\n    // const localPos = new PIXI.Point(contentItem.position[0], contentItem.position[1] - 30);\n    \n    // gsap.to(viewport, {\n    //   duration: .8,\n    //   onUpdate: () => {\n    //     viewport.moveCenter(localPos);  \n    //   },\n    //   pixi: {\n    //     scale: 1\n    //   },\n    //   onComplete: () => {\n    //     props.labelClicked(contentItem);\n    //   }\n    //});\n  }\n\n  const handleClose = () => {\n    setSelectedLabel(null);\n  }\n  \n  const image = getImage(props.map);\n  \n  return (\n    <>\n      <div className=\"button-home\" onClick={props.goBack}/>\n      <Map\n        content={content}\n        image={image}\n        worldWidth={5487}\n        worldHeight={2707}\n        canvasWidth={canvasWidth}\n        canvasHeight={canvasHeight}\n        labelClick={handleLabelClick}\n      >\n      </Map>\n      { selectedLabel && (\n      <ContentModal \n        content={selectedLabel} \n        onClose={handleClose} \n      /> \n    )}\n\n    </>\n  )\n};\n\nexport default Warehouse;\n\nconst getImage = (thismap: map) => {\n  switch(thismap) {\n    case map.zalmweg:\n      return \"images/map/zalmweg.png\";\n    case map.steurweg:\n      default:\n      return \"images/map/steurweg.png\";\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}